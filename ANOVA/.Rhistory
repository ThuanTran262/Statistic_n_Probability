data_cpt$MD <- MD
boxplot(MD)
quartiles <- quantile(data_cpt$MD, probs=c(.25, .75))
IQR <- IQR(data_cpt$MD)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
exclude_data <- subset(data_cpt, data_cpt$MD <= Lower | data_cpt$MD >= Upper)
mean(exclude_data$MD)
data_cpt <- data_cpt %>% mutate(Group = case_when(MD > Lower & MD < Upper ~ 1,
MD <= Lower | MD >= Upper ~ 2))
data_cpt
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
Group <- data_cpt[, c('Group')]
l <- length(unique(Group))
pairs(data_cpt[,numeric_cols], bg = hcl.colors(l, "Temps")[Group], col = hcl.colors(l, "Temps")[Group])
data_new <- subset(data_cpt, data_cpt$MD > Lower & data_cpt$MD < Upper)
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
boxplot(data_new[[i]], xlab=i)
}
nrow(data_cpt)
nrow(data_new)
str(data_new)
hist(data_new$Gross)
bc_trans <- BoxCoxTrans(data_new$Gross)
data_new$Gross <- predict(bc_trans, data_new$Gross)
data_bc <- data_new$Gross
bc_trans <- BoxCoxTrans(data_bc)
data_new$Gross <- predict(bc_trans, data_bc)
data_bc
str(data_bc)
data_bc <- data_new$Gross
bc_trans <- BoxCoxTrans(data_bc)
predict(bc_trans, data_bc)
library("readxl")
library(corrplot)
library("dplyr")
library(mice, warn.conflicts=FALSE)
library(car)
library(caret)
library(dplyr)
library(cleandata)
# Load the data
data <- read_excel('./CSM.xlsx')
head(data)
# Rename columns
colnames(data) = c("Movie", "Year", "Ratings", "Genre", "Gross", "Budget", "Screens", "Sequel", "Sentiment",
"Views", "Likes", "Dislikes", "Comments", "Aggregate_Followers")
# Check the data shape
nrow(data)
length(colnames(data))
# Check the data duplicated
nrow(unique(data))
# Check the data type
str(data)
data <- data[, c('Ratings', 'Genre', 'Gross', 'Budget', 'Screens', 'Sequel', 'Sentiment', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')]
unique(data$Genre)
unique(data$Sequel)
unique(data$Sentiment)
data$Genre = relevel(as.factor(data$Genre), ref=1)
contrasts(data$Genre)
data$Sentiment <- as.ordered(data$Sentiment)
data$Sequel <- as.ordered(data$Sequel)
as.data.frame(colSums(is.na(data))*100/nrow(data))
md.pattern(data, )
# Loại đi dữ liệu null ở biến Budget
data <- subset(data, is.na(data$Budget) == FALSE)
# sử dụng method cart
imp <- mice(data, method='cart', seed=123)
data_cpt <- complete(imp)
data_cpt
t.test(data$Screens, data_cpt$Screens)
t.test(data$Aggregate_Followers, data_cpt$Aggregate_Followers)
numeric_cols = c('Ratings', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
corrplot(cor(data_cpt[,numeric_cols]), addCoef.col = 'black', method="color")
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
hist(data_cpt[[i]], main=i)
}
data_bc <- data_new$Gross
bc_trans <- BoxCoxTrans(data_bc)
predict(bc_trans, data_bc)
data_bc <- data_new$Gross
bc_trans <- BoxCoxTrans(data_bc)
predict(bc_trans, data_bc)
data_bc <- data_new$Gross
bc_trans <- BoxCoxTrans(data_bc)
predict(bc_trans, data_bc)
?BoxCoxTrans
data_bc <- data_new['Gross']
bc_trans <- BoxCoxTrans(data_bc)
data_bc <- data_new['Gross']
bc_trans <- BoxCoxTrans(data_bc)
bc_trans
bc_trans <- BoxCoxTrans(data_cpt$Gross)
transformed_data <- predict(bc_trans, data_cpt$Gross)
library(tidyverse)
library(dplyr)
library(stringr)
library(boot)
library(ggplot2)
library(stats) # Anova()
library(corrplot)
library(mice, warn.conflicts=FALSE)
library(car)
library(caret)
library(lubridate)
# https://www.kaggle.com/datasets/steveahn/memory-test-on-drugged-islanders-data
data <- read.csv("Islander_data.csv")
# [1] 198   9
head(data, 10)
str(data)
# factor các biến định tính: Happy_Sad_group, Dosage, Drug
data$Happy_Sad_group <- as.factor(data$Happy_Sad_group)
data$Dosage <- as.factor(data$Dosage)
data$Drug <- as.factor(data$Drug)
data <- subset(data, select = c(Happy_Sad_group, Dosage, Drug, Diff))
# check na values
colSums(is.na(data))
data %>%
ggplot(aes(y = Diff, x = Drug, color = Drug)) +
geom_boxplot(alpha = 0.5, outlier.alpha = 0) +
geom_jitter(width = 0.25) +
theme_bw()
data <- data %>%
filter(!((Drug == "T") & (Diff > 24)) & !((Drug == "S") & (Diff < -25)) & !((Drug == "T") & (Diff < -20)))
dim(data)
data %>%
ggplot(aes(y = Diff, x = Drug, color = Drug)) +
geom_boxplot(alpha = 0.5, outlier.alpha = 0) +
geom_jitter(width = 0.25) +
theme_bw()
data %>%
arrange(Drug) %>%
select(Drug, Diff) %>%
ggplot(aes(x = 1:nrow(data), y = Diff, color = Drug)) +
geom_line(stat = "identity")
data %>%
arrange(Drug, Diff) %>%
select(Drug, Diff) %>%
ggplot(aes(x = 1:nrow(data), y = Diff, color = Drug)) +
geom_line(stat = "identity")
data %>%
group_by(Happy_Sad_group, Dosage, Drug) %>%
summarise(cnt = n(), mean = round(mean(Diff), 3), std = round(sd(Diff), 3), .groups = 'drop') %>%
head(10)
m1 <- aov(Diff ~ Happy_Sad_group*Dosage*Drug, data = data)
summary(m1)
m2 <- aov(Diff ~ Happy_Sad_group + Dosage + Drug, data = data)
summary(m2)
TukeyHSD(m2)
#[Figure 1] Residual Diagnostics for Model Validity
par(mfrow = c(2,2))
plot(m2)
shapiro.test(residuals(m2))
m3 <- aov(Diff ~ Dosage*Drug, data = data)
summary(m3)
TukeyHSD(m3)
# https://rpubs.com/HoanDang/abc456
# [Figure 1] Residual Diagnostics for Model Validity
par(mfrow = c(2,2))
plot(m3)
shapiro.test(residuals(m3))
library("readxl")
library(corrplot)
library("dplyr")
library(mice, warn.conflicts=FALSE)
library(car)
library(caret)
library(dplyr)
library(cleandata)
# Load the data
data <- read_excel('./CSM.xlsx')
head(data)
# Rename columns
colnames(data) = c("Movie", "Year", "Ratings", "Genre", "Gross", "Budget", "Screens", "Sequel", "Sentiment",
"Views", "Likes", "Dislikes", "Comments", "Aggregate_Followers")
# Kiểm tra data shape
nrow(data)
length(colnames(data))
# Kiểm tra duplicate
nrow(unique(data))
# Kiểm tra data type
str(data)
data <- data[, c('Ratings', 'Genre', 'Gross', 'Budget', 'Screens', 'Sequel', 'Sentiment', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')]
unique(data$Genre)
unique(data$Sequel)
unique(data$Sentiment)
data$Genre = relevel(as.factor(data$Genre), ref=1)
contrasts(data$Genre)
data$Sentiment <- as.ordered(data$Sentiment)
data$Sequel <- as.ordered(data$Sequel)
# Kiểm tra giá trị null
colSums(is.na(data))/nrow(data)
md.pattern(data)
flux(data)
fluxplot(data, xlim=c(0,1), ylim=c(0,1),eqscplot = FALSE)
# Loại đi dữ liệu null ở biến Budget
data <- subset(data, is.na(data$Budget) == FALSE)
# sử dụng method cart
imp <- mice(data, method='cart', seed=123)
data_cpt <- complete(imp)
data_cpt
t.test(data$Screens, data_cpt$Screens)
t.test(data$Aggregate_Followers, data_cpt$Aggregate_Followers)
numeric_cols = c('Ratings', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
corrplot(cor(data_cpt[,numeric_cols]), addCoef.col = 'black', method="color")
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
hist(data_cpt[[i]], main=i)
}
bc_trans <- BoxCoxTrans(data_cpt$Gross)
data_cpt$Gross <- predict(bc_trans, data_cpt$Gross)
par(mfrow=c(1, 2))
ggplot(data.frame(x = data_cpt$Gross), aes(x)) +
geom_histogram(binwidth = 100, color = "black", fill = "lightblue") +
ggtitle("Histogram of Box-Cox Transformed Data")
std <- sd(data_cpt$Gross)
mu <- mean(data_cpt$Gross)
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
for (i in numeric_cols){
data_cpt[[i]] <- scale(data_cpt[[i]])
}
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
hist(data_cpt[[i]], main=i)
}
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
boxplot(data_cpt[[i]], xlab=i)
}
pairs(data_cpt[,numeric_cols])
MD <- mahalanobis(data_cpt[, numeric_cols], colMeans(data_cpt[, numeric_cols]), cov(data_cpt[, numeric_cols]), inverted=TRUE)
data_cpt$MD <- MD
boxplot(MD)
quartiles <- quantile(data_cpt$MD, probs=c(.25, .75))
IQR <- IQR(data_cpt$MD)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
exclude_data <- subset(data_cpt, data_cpt$MD <= Lower | data_cpt$MD >= Upper)
mean(exclude_data$MD)
data_cpt <- data_cpt %>% mutate(Group = case_when(MD > Lower & MD < Upper ~ 1,
MD <= Lower | MD >= Upper ~ 2))
data_cpt
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
Group <- data_cpt[, c('Group')]
l <- length(unique(Group))
pairs(data_cpt[,numeric_cols], bg = hcl.colors(l, "Temps")[Group], col = hcl.colors(l, "Temps")[Group])
data_new <- subset(data_cpt, data_cpt$MD > Lower & data_cpt$MD < Upper)
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
boxplot(data_new[[i]], xlab=i)
}
nrow(data_cpt)
nrow(data_new)
str(data_new)
# Split train-test data
set.seed(123)
training.samples <- data_new$Gross  %>%  createDataPartition(p = 0.8, list = FALSE)
train.data  <- data_new[training.samples, ]
test.data <- data_new[-training.samples, ]
dim(train.data)
dim(test.data)
df <- train.data[,c("Ratings", "Gross", "Budget", "Screens", "Views", "Likes", "Dislikes", "Comments", "Aggregate_Followers")]
model_1 <- lm(Gross~., data=df)
vif_model_1 <- vif(model_1)
barplot(vif_model_1, col = "bisque1", main = "Variance Inflation Factor (VIF)", las = 2, cex.names = 1)
vif_model_1
model_2 <- lm(Gross~., data=df[, c("Ratings", "Gross", "Budget", "Screens", "Comments", "Views", "Dislikes", "Aggregate_Followers")])
vif_model_2 <- vif(model_2)
barplot(vif_model_2, col = "bisque1", main = "Variance Inflation Factor (VIF)", las = 2, cex.names = 1)
vif_model_2
train.data <- train.data[, c("Ratings", "Gross", "Budget", "Screens", "Comments", "Views", "Dislikes", "Aggregate_Followers", 'Genre', 'Sequel', 'Sentiment')]
full_model <- lm(Gross~., data=train.data)
summary(full_model)
step(full_model, direction = 'backward', trace = TRUE)
model_re = lm(Gross~., data=train.data[,c('Gross', 'Ratings', 'Budget', 'Screens', 'Aggregate_Followers', 'Dislikes')])
summary(model_re)
model_re_2 <- lm(Gross~., data=train.data[,c('Gross', 'Ratings', 'Budget', 'Screens', 'Aggregate_Followers')])
anova(model_re, model_re_2)
summary(model_re_2)
# Make prediction
predictions <- model_re_2 %>% predict(test.data)
# Model performance
# (a) Prediction error, RMSE
rmse = RMSE(predictions, test.data$Gross)
rmse
mu
std
pred <- predictions*std + mu
pred
actual <- test.data$Gross*std + mu
rmse = RMSE(pred, actual)
rmse
mean(actual)
mean(pred)
data.frame(pred, actual)
shapiro.test(residuals(model_re_2))
plot(model_re_2)
model_re_2 <- boxCox(lm(Gross~., data=train.data[,c('Gross', 'Ratings', 'Budget', 'Screens', 'Sequel')]), family='yjPower')
lambda <- model_re_2$x[which.max(model_re_2$y)]
lambda
library(ggpubr)
ggqplot(model_re_2$residuals)
unique(data$Genre)
library("readxl")
library(corrplot)
library("dplyr")
library(mice, warn.conflicts=FALSE)
library(car)
library(caret)
library(dplyr)
library(cleandata)
# Load the data
data <- read_excel('./CSM.xlsx')
head(data)
# Rename columns
colnames(data) = c("Movie", "Year", "Ratings", "Genre", "Gross", "Budget", "Screens", "Sequel", "Sentiment",
"Views", "Likes", "Dislikes", "Comments", "Aggregate_Followers")
# Kiểm tra data shape
nrow(data)
length(colnames(data))
# Kiểm tra duplicate
nrow(unique(data))
# Kiểm tra data type
str(data)
data <- data[, c('Ratings', 'Genre', 'Gross', 'Budget', 'Screens', 'Sequel', 'Sentiment', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')]
unique(data$Genre)
unique(data$Sequel)
unique(data$Sentiment)
data$Genre = relevel(as.factor(data$Genre), ref=1)
contrasts(data$Genre)
data$Sentiment <- as.ordered(data$Sentiment)
data$Sequel <- as.ordered(data$Sequel)
# Kiểm tra giá trị null
colSums(is.na(data))/nrow(data)
md.pattern(data)
flux(data)
fluxplot(data, xlim=c(0,1), ylim=c(0,1),eqscplot = FALSE)
# Loại đi dữ liệu null ở biến Budget
data <- subset(data, is.na(data$Budget) == FALSE)
# sử dụng method cart
imp <- mice(data, method='cart', seed=123)
data_cpt <- complete(imp)
data_cpt
t.test(data$Screens, data_cpt$Screens)
t.test(data$Aggregate_Followers, data_cpt$Aggregate_Followers)
numeric_cols = c('Ratings', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
corrplot(cor(data_cpt[,numeric_cols]), addCoef.col = 'black', method="color")
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
hist(data_cpt[[i]], main=i)
}
bc_trans <- BoxCoxTrans(data_cpt$Gross)
data_cpt$Gross <- predict(bc_trans, data_cpt$Gross)
shapiro.test(data_cpt$Gross)
lambda <- bc_trans$lambda
lambda
par(mfrow=c(1, 2))
ggplot(data.frame(x = data_cpt$Gross), aes(x)) +
geom_histogram(binwidth = 100, color = "black", fill = "lightblue") +
ggtitle("Histogram of Box-Cox Transformed Data")
qqnorm(data_cpt$Gross)
qqline(data_cpt$Gross, col = "red")
std <- sd(data_cpt$Gross)
mu <- mean(data_cpt$Gross)
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
for (i in numeric_cols){
data_cpt[[i]] <- scale(data_cpt[[i]])
}
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
hist(data_cpt[[i]], main=i)
}
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
boxplot(data_cpt[[i]], xlab=i)
}
pairs(data_cpt[,numeric_cols])
MD <- mahalanobis(data_cpt[, numeric_cols], colMeans(data_cpt[, numeric_cols]), cov(data_cpt[, numeric_cols]), inverted=TRUE)
data_cpt$MD <- MD
boxplot(MD, main='Boxplot of Mahalanobis distance')
quartiles <- quantile(data_cpt$MD, probs=c(.25, .75))
IQR <- IQR(data_cpt$MD)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
exclude_data <- subset(data_cpt, data_cpt$MD <= Lower | data_cpt$MD >= Upper)
mean(exclude_data$MD)
data_cpt <- data_cpt %>% mutate(Group = case_when(MD > Lower & MD < Upper ~ 1,
MD <= Lower | MD >= Upper ~ 2))
data_cpt
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
Group <- data_cpt[, c('Group')]
l <- length(unique(Group))
pairs(data_cpt[,numeric_cols], bg = hcl.colors(l, "Temps")[Group], col = hcl.colors(l, "Temps")[Group])
data_new <- subset(data_cpt, data_cpt$MD > Lower & data_cpt$MD < Upper)
numeric_cols = c('Ratings', 'Gross', 'Budget', 'Screens', 'Views', 'Likes', 'Dislikes', 'Comments', 'Aggregate_Followers')
par(mfrow=c(2, 5))
for (i in numeric_cols){
boxplot(data_new[[i]], xlab=i)
}
nrow(data_cpt)
nrow(data_new)
str(data_new)
# Split train-test data
set.seed(123)
training.samples <- data_new$Gross  %>%  createDataPartition(p = 0.8, list = FALSE)
train.data  <- data_new[training.samples, ]
test.data <- data_new[-training.samples, ]
dim(train.data)
dim(test.data)
df <- train.data[,c("Ratings", "Gross", "Budget", "Screens", "Views", "Likes",
"Dislikes", "Comments", "Aggregate_Followers")]
model_1 <- lm(Gross~., data=df)
vif_model_1 <- vif(model_1)
barplot(vif_model_1, col = "bisque1", main = "Variance Inflation Factor (VIF)",
las = 2, cex.names = 1)
data.frame(vif_model_1)
model_2 <- lm(Gross~., data=df[, c("Ratings", "Gross", "Budget", "Screens",
"Comments", "Views", "Dislikes", "Aggregate_Followers")])
vif_model_2 <- vif(model_2)
barplot(vif_model_2, col = "bisque1", main = "Variance Inflation Factor (VIF)",
las = 2, cex.names = 1)
data.frame(vif_model_2)
train.data <- train.data[, c("Ratings", "Gross", "Budget", "Screens", "Comments",
"Views", "Dislikes", "Aggregate_Followers", 'Genre',
'Sequel', 'Sentiment')]
full_model <- lm(Gross~., data=train.data)
summary(full_model)
step(full_model, direction = 'backward', trace = TRUE)
model_re = lm(Gross~., data=train.data[,c('Gross', 'Ratings', 'Budget', 'Screens', 'Aggregate_Followers', 'Dislikes')])
summary(model_re)
model_re_2 <- lm(Gross~., data=train.data[,c('Gross', 'Ratings', 'Budget', 'Screens', 'Aggregate_Followers')])
anova(model_re, model_re_2)
summary(model_re_2)
# Make prediction
predictions <- model_re_2 %>% predict(test.data)
# Model performance
# (a) Prediction error, RMSE
rmse = RMSE(predictions, test.data$Gross)
rmse
mu
std
inverse_pred <- predictions*std + mu
inverse_pred
inverse_actual <- test.data$Gross*std + mu
rmse = RMSE(inverse_pred, inverse_actual)
rmse
mean(inverse_actual)
mean(inverse_pred)
bc_inv_pred <- exp(log(lambda * inverse_pred + 1) / lambda)
bc_inv_act <- exp(log(lambda * inverse_actual + 1) / lambda)
RMSE(bc_inv_pred, bc_inv_act)
mean(bc_inv_act)
df <- data.frame(bc_inv_pred, bc_inv_act)
df
df %>%  mutate(ID = 1:nrow(df)) %>%  ggplot(aes(ID)) +
geom_line(aes(y = bc_inv_pred, colour = "inverse_prediction")) +
geom_line(aes(y = bc_inv_act, colour = "inverse_actual"))
data[68, 'Gross']
3057695.7
shapiro.test(residuals(model_re_2))
plot(model_re_2)
library(dplyr)
library(car)
library(dplyr)
library(car)
setwd("D:/thuantt2/Document/Statistic_n_Probability/ANOVA")
data <- read.csv('insurance.Rmd')
head(data)
data <- read.csv('../data/insurance.csv')
head(data)
# get columns
data <- data[,c(4, 7)]
head(data)
unique(data$children)
boxplot(data$charges ~ data$children)
data %>% group_by(children)  %>%
summarise(mean_charge = mean(charges))
data$children <- as.factor(data$children)
lm1 <- lm(charges~children, data=data)
anova(lm1)
data$children <- as.factor(data$children)
lm1 <- lm(charges~children, data=data)
# anova(lm1)
summary(lm1)
data$children <- as.factor(data$children)
lm1 <- lm(charges~children, data=data)
anova(lm1)
data$children <- as.factor(data$children)
lm1 <- lm(charges~children, data=data)
summary(lm1)
data$children <- as.factor(data$children)
lm1 <- lm(charges~children, data=data)
anova(lm1)
summary(lm1)
aov1 <- aov(charges~children, data=data)
summary(aov1)
#test all possible comparisons of two means.
with(data, pairwise.t.test(charges, children, p.adj = "bonferroni"))
?anova
#test all possible comparisons of two means.
with(data, pairwise.t.test(charges, children, p.adj = "bonferroni"))
